# -*- coding: utf-8 -*-
"""river-time-series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yLyD-etRb0dhImtkRtfKldiYN5MO0muR
"""

import requests
from pprint import pprint

CMR_OPS = 'https://cmr.earthdata.nasa.gov/search'

url = f'{CMR_OPS}/{"collections"}'

response = requests.get(url,
                        params={
                            'cloud_hosted': 'True',
                            'has_granules': 'True',
                        },
                        headers={
                            'Accept': 'application/json',
                        }
                       )

response

response.status_code

for k,v in response.headers.items():
    print(f'{k}: {v}')

response.content

response.headers['CMR-Hits']

pprint(response.json()['feed']['entry'][0])

collections = response.json()['feed']['entry']

# for collection in collections:
#     print(f'{collection["archive_center"]} {collection["dataset_id"]} {collection["id"]}')

provider = 'POCLOUD'
response = requests.get(url,
                        params={
                            'cloud_hosted': 'True',
                            'has_granules': 'True',
                            'provider': provider,
                        },
                        headers={
                            'Accept': 'application/json'
                        }
                       )

response

for k,v in response.headers.items():
    print(f'{k}: {v}')

response.headers['cmr-hits']

collections = response.json()['feed']['entry']
for collection in collections:
    print(f'{collection["archive_center"]} {collection["dataset_id"]} {collection["id"]}')

provider = 'POCLOUD'
response = requests.get(url,
                        params={
                            'cloud_hosted': 'True',
                            'provider': provider,
                            'page-size': 660,
                        },
                        headers={
                            'Accept': 'application/json'
                        }
                       )

response.headers['cmr-hits']

collections = response.json()['feed']['entry']
for collection in collections:
    print(f'{collection["archive_center"]} {collection["dataset_id"]} {collection["id"]}')

url = f'{CMR_OPS}/{"granules"}'

response = requests.get(url, 
                        params={
                            'concept_id': 'C2036882391-POCLOUD',
                            'temporal': '2015-10-17T00:00:00Z,2022-10-18T23:59:59Z',
                            'bounding_box': '72.649292,21.577956,76.120972,22.322209',
                            # 'bounding_box': '91.845154,26.209102,92.089599,26.386483',
                            'page_size': 400,
                            },
                        headers={
                            'Accept': 'application/json'
                            }
                       )
print(response.status_code)

for k,v in response.headers.items():
    print(f'{k}: {v}')

print(response.headers['CMR-Hits'])

granules = response.json()['feed']['entry']

pprint(granules)

from netrc import netrc
from subprocess import Popen
from platform import system
from getpass import getpass
import os
import warnings
warnings.filterwarnings('ignore')

urs = 'urs.earthdata.nasa.gov'    # Earthdata URL endpoint for authentication
prompts = ['Enter NASA Earthdata Login Username: ',
           'Enter NASA Earthdata Login Password: ']

# Determine the OS (Windows machines usually use an '_netrc' file)
netrc_name = "_netrc" if system()=="Windows" else ".netrc"

# Determine if netrc file exists, and if so, if it includes NASA Earthdata Login Credentials
try:
    netrcDir = os.path.expanduser(f"~/{netrc_name}")
    netrc(netrcDir).authenticators(urs)[0]

# Below, create a netrc file and prompt user for NASA Earthdata Login Username and Password
except FileNotFoundError:
    homeDir = os.path.expanduser("~")
    Popen('touch {0}{2} | echo machine {1} >> {0}{2}'.format(homeDir + os.sep, urs, netrc_name), shell=True)
    Popen('echo login {} >> {}{}'.format(getpass(prompt=prompts[0]), homeDir + os.sep, netrc_name), shell=True)
    Popen('echo \'password {} \'>> {}{}'.format(getpass(prompt=prompts[1]), homeDir + os.sep, netrc_name), shell=True)
    # Set restrictive permissions
    Popen('chmod 0600 {0}{1}'.format(homeDir + os.sep, netrc_name), shell=True)

    # Determine OS and edit netrc file if it exists but is not set up for NASA Earthdata Login
except TypeError:
    homeDir = os.path.expanduser("~")
    Popen('echo machine {1} >> {0}{2}'.format(homeDir + os.sep, urs, netrc_name), shell=True)
    Popen('echo login {} >> {}{}'.format(getpass(prompt=prompts[0]), homeDir + os.sep, netrc_name), shell=True)
    Popen('echo \'password {} \'>> {}{}'.format(getpass(prompt=prompts[1]), homeDir + os.sep, netrc_name), shell=True)

pip install boto3

pip install xarray --user

pip install rasterio

pip install rioxarray

pip install geos

pip install holoviews --user

pip install hvplot

pip install pip==21.3.1

pip install geoviews

!pip install -q condacolab
import condacolab
condacolab.install()

!mamba install -q -c conda-forge cartopy

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
from datetime import datetime
import os
import requests
import boto3
import numpy as np
import xarray as xr
import rasterio as rio
from rasterio.session import AWSSession
from rasterio.plot import show
import rioxarray
import geoviews as gv
import hvplot.xarray
import holoviews as hv
gv.extension('bokeh', 'matplotlib')

pip install git+https://github.com/nasa/zarr-eosdis-store.git@main#egg=zarr-eosdis-store

pip install pqdm

pip install zarr-eosdis-store

!python --version

from eosdis_store import EosdisStore
import xarray as xr

import numpy as np
import requests
from pqdm.threads import pqdm
from matplotlib import animation, pyplot as plt
from IPython.display import display, HTML

from pprint import pprint

!pip list

url='https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/PRESWOT_HYDRO_L4_LAKE_STORAGE_TIME_SERIES_V2/Asia_Vallabhsagar_StorageV2_958.nc'

!pip install zarr

import zarr

ds=xr.open_zarr(EosdisStore(url),consolidated=False)

ds

import hvplot.xarray

import holoviews as hv

os.environ['HV_DOC_HTML'] = 'true'

ds.surface_water_height[0:643]

ds.surface_water_extent[0:643]

ds.water_storage[0:643]

hv.extension('bokeh')

import hvplot.pandas
import pandas as pd, numpy as np
s_w_h=ds.surface_water_height[0:643]

s_w_h.hvplot()

hv.extension('bokeh')

import hvplot.pandas
import pandas as pd, numpy as np
s_w_h=ds.surface_water_extent[0:643]

s_w_h.hvplot()

hv.extension('bokeh')

import hvplot.pandas
import pandas as pd, numpy as np
s_w_h=ds.water_storage[0:643]

s_w_h.hvplot()